# ################################
# Model: Speaker identification with ECAPA
# Authors: Hwidong Na & Mirco Ravanelli
# ################################

# Basic parameters
seed: 1986
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/ecapa_augment/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
data_folder: /mnt/storage4/speaker_recognition/voxceleb2/dev_and_v1test  # e.g. /path/to/Voxceleb
train_annotation: !ref <save_folder>/train.csv
valid_annotation: !ref <save_folder>/dev.csv

# Folder to extract data augmentation files
rir_folder: !ref <data_folder> # Change it if needed

# Use the following links for the official voxceleb splits:
# VoxCeleb1 (cleaned): https://www.robots.ox.ac.uk/~vgg/data/voxceleb/meta/veri_test2.txt
# VoxCeleb1-H (cleaned): https://www.robots.ox.ac.uk/~vgg/data/voxceleb/meta/list_test_hard2.txt
# VoxCeleb1-E (cleaned): https://www.robots.ox.ac.uk/~vgg/data/voxceleb/meta/list_test_all2.txt.
# VoxCeleb1-E and VoxCeleb1-H lists are drawn from the VoxCeleb1 training set.
# Therefore you cannot use any files in VoxCeleb1 for training if you are using these lists for testing.
verification_file: https://www.robots.ox.ac.uk/~vgg/data/voxceleb/meta/veri_test2.txt

wav2vec2_hub: facebook/wav2vec2-large-960h-lv60-self
freeze_wav2vec: True

skip_prep: False
ckpt_interval_minutes: 15 # save checkpoint every N min

# Training parameters
number_of_epochs: 10
batch_size: 32
lr: 0.001
base_lr: 0.00000001
max_lr: !ref <lr>
step_size: 65000
sample_rate: 16000
sentence_len: 5.0 # seconds
random_segment: False
shuffle: True
random_chunk: False
chunk_size: 200

# Feature parameters
n_mels: 80
left_frames: 0
right_frames: 0
deltas: False

# Number of speakers
out_n_neurons: 7205 #1211 for vox1  # 5994 for vox2, 7205 for vox1+vox2

dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: !ref <shuffle>
    drop_last: True
    num_workers: 2

# Functions
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: !ref <n_mels>
    left_frames: !ref <left_frames>
    right_frames: !ref <right_frames>
    deltas: !ref <deltas>

wav2vec2: !new:speechbrain.lobes.models.huggingface_wav2vec.HuggingFaceWav2Vec2
   source: !ref <wav2vec2_hub>
   output_norm: False
   output_hidden_states: False
   freeze: !ref <freeze_wav2vec>
   save_path: !ref <save_folder>/wav2vec2_checkpoint


encoder: !new:speechbrain.lobes.models.ssl_speaker_encoder.SSL_speaker_enc
    lin_dims: [1024,512,256]

classifier: !new:speechbrain.lobes.models.ssl_speaker_encoder.Classifier
    input_shape : [null, null, 512]

pooling: !new:speechbrain.lobes.models.ssl_speaker_encoder.AvgPooling
    use_std: False


# embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
#     input_size: !ref <n_mels>
#     channels: [1024, 1024, 1024, 1024, 3072]
#     kernel_sizes: [5, 3, 3, 3, 1]
#     dilations: [1, 2, 3, 4, 1]
#     groups: [1, 1, 1, 1, 1]
#     attention_channels: 128
#     lin_neurons: 192


epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>


augment_wavedrop: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [100]

augment_speed: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

add_rev: !new:speechbrain.lobes.augment.EnvCorrupt
    openrir_folder: !ref <rir_folder>
    openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 1.0
    noise_prob: 0.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

add_noise: !new:speechbrain.lobes.augment.EnvCorrupt
    openrir_folder: !ref <rir_folder>
    openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 0.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

add_rev_noise: !new:speechbrain.lobes.augment.EnvCorrupt
    openrir_folder: !ref <rir_folder>
    openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 1.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0


# Definition of the augmentation pipeline.
# If concat_augment = False, the augmentation techniques are applied
# in sequence. If concat_augment = True, all the augmented signals
# # are concatenated in a single big batch.

augment_pipeline: [
    !ref <augment_wavedrop>,
    !ref <augment_speed>,
    !ref <add_rev>,
    !ref <add_noise>,
    !ref <add_rev_noise>
]
concat_augment: True

mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

modules:
    compute_features: !ref <compute_features>
    augment_wavedrop: !ref <augment_wavedrop>
    augment_speed: !ref <augment_speed>
    add_rev: !ref <add_rev>
    add_noise: !ref <add_noise>
    add_rev_noise: !ref <add_rev_noise>
    wav2vec: !ref <wav2vec2>
    encoder: !ref <encoder>
    pooling: !ref <pooling>
    classifier: !ref <classifier>
    mean_var_norm: !ref <mean_var_norm>
    

compute_cost: !name:speechbrain.nnet.losses.bce_loss
compute_error: !name:speechbrain.nnet.losses.classification_error

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0.000002

lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
    base_lr: !ref <base_lr>
    max_lr: !ref <max_lr>
    step_size: !ref <step_size>

# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        encoder: !ref <encoder>
        classifier: !ref <classifier>
        normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>
        lr_annealing: !ref <lr_annealing>
